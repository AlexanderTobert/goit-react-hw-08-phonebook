{"version":3,"file":"static/js/483.29335b8f.chunk.js","mappings":"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","sources":["components/RegisterForm/RegisterFormStyled.js","components/RegisterForm/RegisterForm.js","pages/RegistrationPage.js","redux/contacts/selectors.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledRegisterPage = styled.div`\n  min-height: calc(100vh);\n  background: rgba(100, 149, 237, 0.75);\n  color: white;\n  padding: 8px;\n`;\n","import * as Yup from 'yup';\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Input,\n  VStack,\n} from '@chakra-ui/react';\nimport { useFormik } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { register } from '../../redux/auth/authOperations';\nimport { useEffect } from 'react';\nimport { resetError } from '../../redux/auth/authSlice';\nimport { selectError } from '../../redux/contacts/selectors';\nimport toast from 'react-hot-toast';\nimport { StyledRegisterPage } from '../RegisterForm/RegisterFormStyled';\n\nconst schema = Yup.object().shape({\n  name: Yup.string().min(3, 'Too short').required('Required'),\n  email: Yup.string().email().required('Required'),\n  password: Yup.string().min(7, 'Too short').required('Required'),\n});\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n  const isError = useSelector(selectError);\n\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      email: '',\n      password: '',\n    },\n    validationSchema: schema,\n    onSubmit: values => {\n      dispatch(register(values));\n    },\n  });\n\n  useEffect(() => {\n    if (isError) {\n      toast.error('Your email is invalid or already registered');\n      dispatch(resetError());\n    }\n  }, [isError, dispatch]);\n\n  return (\n    <StyledRegisterPage>\n      <Flex align=\"center\" justify=\"center\" marginTop=\"20%\">\n        <Box p={8} rounded=\"md\">\n          <form onSubmit={formik.handleSubmit}>\n            <VStack spacing={4} align=\"flex-start\">\n              <FormControl\n                isInvalid={formik.touched.name && formik.errors.name}\n              >\n                <FormLabel color=\"white\" htmlFor=\"name\">\n                  Your Name\n                </FormLabel>\n                <Input\n                  name=\"name\"\n                  id=\"name\"\n                  type=\"name\"\n                  variant=\"outline\"\n                  onChange={formik.handleChange}\n                  value={formik.values.name}\n                  onBlur={formik.handleBlur}\n                />\n                <FormErrorMessage>{formik.errors.name}</FormErrorMessage>\n              </FormControl>\n              <FormControl\n                isInvalid={formik.touched.email && formik.errors.email}\n              >\n                <FormLabel color=\"white\" htmlFor=\"email\">\n                  Email Address\n                </FormLabel>\n                <Input\n                  name=\"email\"\n                  id=\"email\"\n                  type=\"email\"\n                  variant=\"outline\"\n                  onChange={formik.handleChange}\n                  value={formik.values.email}\n                  onBlur={formik.handleBlur}\n                />\n                <FormErrorMessage>{formik.errors.email}</FormErrorMessage>\n              </FormControl>\n              <FormControl\n                isInvalid={formik.touched.password && formik.errors.password}\n              >\n                <FormLabel color=\"white\" htmlFor=\"password\">\n                  Password\n                </FormLabel>\n                <Input\n                  id=\"password\"\n                  name=\"password\"\n                  type=\"password\"\n                  variant=\"outline\"\n                  onChange={formik.handleChange}\n                  value={formik.values.password}\n                  onBlur={formik.handleBlur}\n                />\n                <FormErrorMessage>{formik.errors.password}</FormErrorMessage>\n              </FormControl>\n              <Button\n                type=\"submit\"\n                width=\"full\"\n                marginTop=\"4\"\n                color=\"black\"\n                bg=\"white\"\n                fontSize=\"18px\"\n                fontWeight=\"bold\"\n              >\n                REGISTER\n              </Button>\n            </VStack>\n          </form>\n        </Box>\n      </Flex>\n    </StyledRegisterPage>\n  );\n};\n","import { RegisterForm } from '../components/RegisterForm/RegisterForm';\n\nexport default function RegistrationPage() {\n  return (\n    <>\n      <RegisterForm />\n    </>\n  );\n}\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectStatusFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectStatusFilter],\n  (contacts, filter) => {\n    return contacts.filter(contacts =>\n      contacts.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n"],"names":["StyledRegisterPage","styled","_templateObject","_taggedTemplateLiteral","schema","Yup","shape","name","min","required","email","password","RegisterForm","dispatch","useDispatch","isError","useSelector","selectError","formik","useFormik","initialValues","validationSchema","onSubmit","values","register","useEffect","toast","resetError","_jsx","children","Flex","align","justify","marginTop","Box","p","rounded","handleSubmit","_jsxs","VStack","spacing","FormControl","isInvalid","touched","errors","FormLabel","color","htmlFor","Input","id","type","variant","onChange","handleChange","value","onBlur","handleBlur","FormErrorMessage","Button","width","bg","fontSize","fontWeight","RegistrationPage","_Fragment","selectContacts","state","contacts","items","selectIsLoading","isLoading","error","selectVisibleContacts","createSelector","filter","toLowerCase","includes"],"sourceRoot":""}