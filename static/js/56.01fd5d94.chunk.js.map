{"version":3,"file":"static/js/56.01fd5d94.chunk.js","mappings":"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","sources":["pages/HomePage/HomePageStyled.js","pages/HomePage/HomePage.js","../node_modules/@chakra-ui/button/src/button-context.ts","../node_modules/@chakra-ui/button/src/button-icon.tsx","../node_modules/@chakra-ui/button/src/button-spinner.tsx","../node_modules/@chakra-ui/button/src/button.tsx","../node_modules/@chakra-ui/button/src/use-button-type.tsx","../node_modules/@chakra-ui/react-use-merge-refs/src/index.ts"],"sourcesContent":["import { styled } from 'styled-components';\n\nexport const StyleContainer = styled.div`\n  min-height: calc(100vh);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: ${props => props.theme.colors.background};\n  color: white;\n`;\n\nexport const StyleTitle = styled.h1`\n  font-weight: 500;\n  font-size: ${props => props.theme.fontSize.fs48};\n  text-align: 'center';\n`;\n\nexport const StyleContactsPageContainer = styled.div`\n  min-height: calc(100vh);\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  gap: ${p => p.theme.spacing(8)};\n  background: ${props => props.theme.colors.background};\n  color: white;\n`;\n\nexport const StyleContactsPage = styled.div`\n  display: flex;\n  flex-wrap: nowrap;\n  align-items: center;\n  justify-content: center;\n`;\n","import React from 'react';\nimport {\n  StyleContainer,\n  StyleTitle,\n  StyleContactsPageContainer,\n  StyleContactsPage,\n} from '../HomePage/HomePageStyled';\n\nimport { useAuth } from '../../hooks/useAuth';\nimport { Link } from 'react-router-dom';\nimport { Button } from '@chakra-ui/react';\n\nexport default function HomePage() {\n  const { userName } = useAuth();\n  const { isLoggedIn } = useAuth();\n\n  return isLoggedIn ? (\n    <StyleContactsPageContainer>\n      <StyleContactsPage>\n        <StyleTitle>Wellcome to Phonebook, {userName.name}!</StyleTitle>\n      </StyleContactsPage>\n      <Button\n        variant=\"link\"\n        colorScheme=\"whide\"\n        width=\"200px\"\n        marginLeft=\"auto\"\n        marginRight=\"auto\"\n      >\n        <Link to=\"/contacts\">My contacts</Link>\n      </Button>\n    </StyleContactsPageContainer>\n  ) : (\n    <StyleContainer>\n      <StyleTitle>Wellcome to Phonebook!</StyleTitle>\n    </StyleContainer>\n  );\n}\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { ThemingProps } from \"@chakra-ui/system\"\n\nexport interface ButtonGroupContext extends ThemingProps<\"Button\"> {\n  /**\n   * @default false\n   */\n  isDisabled?: boolean\n}\n\nexport const [ButtonGroupProvider, useButtonGroup] =\n  createContext<ButtonGroupContext>({\n    strict: false,\n    name: \"ButtonGroupContext\",\n  })\n","import { chakra, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { cloneElement, isValidElement } from \"react\"\n\nexport function ButtonIcon(props: HTMLChakraProps<\"span\">) {\n  const { children, className, ...rest } = props\n\n  const _children = isValidElement(children)\n    ? cloneElement<any>(children, {\n        \"aria-hidden\": true,\n        focusable: false,\n      })\n    : children\n\n  const _className = cx(\"chakra-button__icon\", className)\n\n  return (\n    <chakra.span\n      display=\"inline-flex\"\n      alignSelf=\"center\"\n      flexShrink={0}\n      {...rest}\n      className={_className}\n    >\n      {_children}\n    </chakra.span>\n  )\n}\n\nButtonIcon.displayName = \"ButtonIcon\"\n","import { Spinner } from \"@chakra-ui/spinner\"\nimport { chakra, HTMLChakraProps, SystemStyleObject } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useMemo } from \"react\"\nimport { ButtonSpinnerOptions } from \"./button-types\"\n\ninterface ButtonSpinnerProps\n  extends HTMLChakraProps<\"div\">,\n    ButtonSpinnerOptions {}\n\nexport function ButtonSpinner(props: ButtonSpinnerProps) {\n  const {\n    label,\n    placement,\n    spacing = \"0.5rem\",\n    children = <Spinner color=\"currentColor\" width=\"1em\" height=\"1em\" />,\n    className,\n    __css,\n    ...rest\n  } = props\n\n  const _className = cx(\"chakra-button__spinner\", className)\n\n  const marginProp = placement === \"start\" ? \"marginEnd\" : \"marginStart\"\n\n  const spinnerStyles: SystemStyleObject = useMemo(\n    () => ({\n      display: \"flex\",\n      alignItems: \"center\",\n      position: label ? \"relative\" : \"absolute\",\n      [marginProp]: label ? spacing : 0,\n      fontSize: \"1em\",\n      lineHeight: \"normal\",\n      ...__css,\n    }),\n    [__css, label, marginProp, spacing],\n  )\n\n  return (\n    <chakra.div className={_className} {...rest} __css={spinnerStyles}>\n      {children}\n    </chakra.div>\n  )\n}\nButtonSpinner.displayName = \"ButtonSpinner\"\n","import { useMergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\n\nimport { useMemo } from \"react\"\nimport { useButtonGroup } from \"./button-context\"\nimport { ButtonIcon } from \"./button-icon\"\nimport { ButtonSpinner } from \"./button-spinner\"\nimport { ButtonOptions } from \"./button-types\"\nimport { useButtonType } from \"./use-button-type\"\n\nexport interface ButtonProps\n  extends HTMLChakraProps<\"button\">,\n    ButtonOptions,\n    ThemingProps<\"Button\"> {}\n\n/**\n * Button component is used to trigger an action or event, such as submitting a form, opening a Dialog, canceling an action, or performing a delete operation.\n *\n * @see Docs https://chakra-ui.com/docs/components/button\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/button/\n */\nexport const Button = forwardRef<ButtonProps, \"button\">((props, ref) => {\n  const group = useButtonGroup()\n  const styles = useStyleConfig(\"Button\", { ...group, ...props })\n\n  const {\n    isDisabled = group?.isDisabled,\n    isLoading,\n    isActive,\n    children,\n    leftIcon,\n    rightIcon,\n    loadingText,\n    iconSpacing = \"0.5rem\",\n    type,\n    spinner,\n    spinnerPlacement = \"start\",\n    className,\n    as,\n    ...rest\n  } = omitThemingProps(props)\n\n  /**\n   * When button is used within ButtonGroup (i.e. flushed with sibling buttons),\n   * it is important to add a `zIndex` on focus.\n   *\n   * So let's read the component styles and then add `zIndex` to it.\n   */\n  const buttonStyles: SystemStyleObject = useMemo(() => {\n    // @ts-ignore\n    const _focus = { ...styles?.[\"_focus\"], zIndex: 1 }\n    return {\n      display: \"inline-flex\",\n      appearance: \"none\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      userSelect: \"none\",\n      position: \"relative\",\n      whiteSpace: \"nowrap\",\n      verticalAlign: \"middle\",\n      outline: \"none\",\n      ...styles,\n      ...(!!group && { _focus }),\n    }\n  }, [styles, group])\n\n  const { ref: _ref, type: defaultType } = useButtonType(as)\n\n  const contentProps = { rightIcon, leftIcon, iconSpacing, children }\n\n  return (\n    <chakra.button\n      ref={useMergeRefs(ref, _ref)}\n      as={as}\n      type={type ?? defaultType}\n      data-active={dataAttr(isActive)}\n      data-loading={dataAttr(isLoading)}\n      __css={buttonStyles}\n      className={cx(\"chakra-button\", className)}\n      {...rest}\n      disabled={isDisabled || isLoading}\n    >\n      {isLoading && spinnerPlacement === \"start\" && (\n        <ButtonSpinner\n          className=\"chakra-button__spinner--start\"\n          label={loadingText}\n          placement=\"start\"\n          spacing={iconSpacing}\n        >\n          {spinner}\n        </ButtonSpinner>\n      )}\n\n      {isLoading ? (\n        loadingText || (\n          <chakra.span opacity={0}>\n            <ButtonContent {...contentProps} />\n          </chakra.span>\n        )\n      ) : (\n        <ButtonContent {...contentProps} />\n      )}\n\n      {isLoading && spinnerPlacement === \"end\" && (\n        <ButtonSpinner\n          className=\"chakra-button__spinner--end\"\n          label={loadingText}\n          placement=\"end\"\n          spacing={iconSpacing}\n        >\n          {spinner}\n        </ButtonSpinner>\n      )}\n    </chakra.button>\n  )\n})\n\nButton.displayName = \"Button\"\n\ntype ButtonContentProps = Pick<\n  ButtonProps,\n  \"leftIcon\" | \"rightIcon\" | \"children\" | \"iconSpacing\"\n>\n\nfunction ButtonContent(props: ButtonContentProps) {\n  const { leftIcon, rightIcon, children, iconSpacing } = props\n  return (\n    <>\n      {leftIcon && <ButtonIcon marginEnd={iconSpacing}>{leftIcon}</ButtonIcon>}\n      {children}\n      {rightIcon && (\n        <ButtonIcon marginStart={iconSpacing}>{rightIcon}</ButtonIcon>\n      )}\n    </>\n  )\n}\n","import { useCallback, useState } from \"react\"\n\nexport function useButtonType(value?: React.ElementType) {\n  const [isButton, setIsButton] = useState(!value)\n  const refCallback = useCallback((node: HTMLElement | null) => {\n    if (!node) return\n    setIsButton(node.tagName === \"BUTTON\")\n  }, [])\n  const type = isButton ? \"button\" : undefined\n  return { ref: refCallback, type } as const\n}\n","import { useMemo } from \"react\"\n\nexport type ReactRef<T> = React.RefCallback<T> | React.MutableRefObject<T>\n\nexport function assignRef<T = any>(\n  ref: ReactRef<T> | null | undefined,\n  value: T,\n) {\n  if (ref == null) return\n\n  if (typeof ref === \"function\") {\n    ref(value)\n    return\n  }\n\n  try {\n    ref.current = value\n  } catch (error) {\n    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`)\n  }\n}\n\nexport function mergeRefs<T>(...refs: (ReactRef<T> | null | undefined)[]) {\n  return (node: T | null) => {\n    refs.forEach((ref) => {\n      assignRef(ref, node)\n    })\n  }\n}\n\nexport function useMergeRefs<T>(...refs: (ReactRef<T> | null | undefined)[]) {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useMemo(() => mergeRefs(...refs), refs)\n}\n"],"names":["StyleContainer","styled","_templateObject","_taggedTemplateLiteral","props","theme","colors","background","StyleTitle","_templateObject2","fontSize","fs48","StyleContactsPageContainer","_templateObject3","p","spacing","StyleContactsPage","_templateObject4","HomePage","userName","useAuth","isLoggedIn","_jsxs","children","_jsx","name","Button","variant","colorScheme","width","marginLeft","marginRight","Link","to","createContext","strict","_createContext2","useButtonGroup","ButtonGroupProvider","ButtonIcon","className","rest","_children","isValidElement","cloneElement","focusable","_className","cx","chakra","span","display","alignSelf","flexShrink","displayName","ButtonSpinner","label","placement","_props$spacing","_props$children","Spinner","color","height","__css","marginProp","spinnerStyles","useMemo","alignItems","position","div","forwardRef","ref","group","styles","useStyleConfig","omitThemingProps","_omitThemingProps$isD","isDisabled","isLoading","isActive","leftIcon","rightIcon","loadingText","_omitThemingProps$ico","iconSpacing","type","spinner","_omitThemingProps$spi","spinnerPlacement","as","buttonStyles","_focus","zIndex","appearance","justifyContent","userSelect","whiteSpace","verticalAlign","outline","value","useState","_useState2","isButton","setIsButton","useCallback","node","tagName","useButtonType","_ref","defaultType","contentProps","button","useMergeRefs","dataAttr","disabled","opacity","ButtonContent","marginEnd","marginStart","assignRef","current","error","Error","mergeRefs","refs","forEach"],"sourceRoot":""}